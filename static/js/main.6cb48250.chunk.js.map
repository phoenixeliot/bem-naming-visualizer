{"version":3,"sources":["features/bemParts/bemPartsSlice.js","components/ColoredBemCode.js","components/BemPartInput.js","components/App.js","reducers.js","index.js"],"names":["createSlice","require","partPrefixes","block","element","modifier","value","cleanPartValue","partName","undefined","trimmed","match","rearrangeValues","bemParts","bemPartsSlice","name","initialState","reducers","setBemParts","state","action","payload","Object","keys","forEach","setBemPart","actions","generateSpans","parts","unknown","join","ColoredBemHtmlExample","mainParts","class1","class2","className","dangerouslySetInnerHTML","__html","mapDispatchToProps","connect","html","spellCheck","onChange","e","target","el","document","createElement","innerHTML","textContent","text","partsRegex","groups","plainParts","assign","key","parseClass","disabled","classNames","replace","rootReducer","combineReducers","bemPartsReducer","store","configureStore","reducer","render","getElementById"],"mappings":"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","file":"static/js/main.6cb48250.chunk.js","sourcesContent":["const { createSlice } = require(\"@reduxjs/toolkit\");\n\nconst partPrefixes = {\n  block: \"\",\n  element: \"__\",\n  modifier: \"_\",\n  value: \"_\",\n};\n\nconst cleanPartValue = (partName, value) => {\n  if (partPrefixes[partName] === undefined) {\n    return value;\n  }\n  if (value == \"\") {\n    return \"\";\n  }\n  const trimmed = value.match(/_{0,2}([a-zA-Z0-9\\\\-]*)/)[1];\n  return partPrefixes[partName] + trimmed;\n};\n\nconst rearrangeValues = (bemParts) => {\n  if (bemParts[\"modifier\"] == \"\") {\n    bemParts[\"modifier\"] = bemParts[\"value\"];\n    bemParts[\"value\"] = \"\";\n  }\n};\n\nconst bemPartsSlice = createSlice({\n  name: \"bemParts\",\n  initialState: {\n    block: \"block\",\n    element: \"__element\",\n    modifier: \"_modifier\",\n    value: \"_value\",\n  },\n  reducers: {\n    setBemParts(state, action) {\n      const bemParts = action.payload;\n      Object.keys(bemParts).forEach((partName) => {\n        state[partName] = cleanPartValue(partName, bemParts[partName]);\n      });\n      rearrangeValues(state);\n    },\n    setBemPart(state, action) {\n      const { partName, value } = action.payload;\n      state[partName] = cleanPartValue(partName, value);\n      rearrangeValues(state);\n    },\n  },\n});\n\nexport const { setBemPart, setBemParts } = bemPartsSlice.actions;\nexport default bemPartsSlice.reducer;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { setBemParts } from \"features/bemParts/bemPartsSlice\";\nimport ContentEditable from \"react-contenteditable\";\n\nconst generateSpans = (parts) => {\n  return [\n    `<span class=\"code code_unknown\">${parts.unknown || \"\"}</span>`,\n    `<span class=\"code code_block\">${parts.block || \"\"}</span>`,\n    `<span class=\"code code_element\">${parts.element || \"\"}</span>`,\n    `<span class=\"code code_modifier\">${parts.modifier || \"\"}</span>`,\n    `<span class=\"code code_value\">${parts.value || \"\"}</span>`,\n  ].join(\"\");\n};\n\nconst keys = [\"unknown\", \"block\", \"element\", \"modifier\", \"value\"];\n\nconst parseClass = (text) => {\n  const partsRegex = /^(?<block>[a-zA-Z0-9\\\\-]+)(?<element>__[a-zA-Z0-9\\\\-]*)?(?<modifier>_[a-zA-Z0-9\\\\-]*)?(?<value>_[a-zA-Z0-9\\\\-]*)?$/;\n  const match = text.match(partsRegex);\n  if (match === null) {\n    return { block: \"\", element: \"\", modifier: \"\", value: \"\", unknown: text };\n  }\n  const parts = match.groups;\n  const plainParts = Object.assign({}, parts); // Make it serializable\n  keys.forEach((key) => {\n    plainParts[key] = plainParts[key] || \"\";\n  });\n  return plainParts;\n};\n\nconst ColoredBemCode = ({ parts, setBemParts }) => {\n  const html = generateSpans(parts);\n  return (\n    <ContentEditable\n      className=\"editable-class-name\"\n      spellCheck=\"false\"\n      html={html}\n      onChange={(e) => {\n        const html = e.target.value;\n        const el = document.createElement(\"div\");\n        el.innerHTML = html;\n        const textContent = el.textContent;\n        setBemParts(parseClass(textContent));\n      }}\n    />\n  );\n};\n\nexport const ColoredBemHtmlExample = ({ parts }) => {\n  const mainParts = {\n    block: parts.block,\n    element: parts.element,\n  };\n  const class1 = generateSpans(mainParts);\n  const class2 = generateSpans(parts);\n  return (\n    <p className=\"code code-block\">\n      <span>&lt;div class=\"</span>\n      <span dangerouslySetInnerHTML={{ __html: class1 }}></span>\n      <span> </span>\n      <span dangerouslySetInnerHTML={{ __html: class2 }}></span>\n      <span>\"&gt;</span>\n    </p>\n  );\n};\n\nconst mapDispatchToProps = {\n  setBemParts,\n};\n\nexport default connect(null, mapDispatchToProps)(ColoredBemCode);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { setBemPart } from \"features/bemParts/bemPartsSlice\";\nimport classNames from \"classnames\";\n\nconst BemPartInput = ({ disabled, partName, value, setBemPart }) => {\n  return (\n    <div>\n      <input\n        className={classNames(\"code\", \"code_\" + partName)}\n        disabled={disabled}\n        value={value.replace(/_/g, \"\")}\n        onChange={(e) => setBemPart({ partName, value: e.target.value })}\n      ></input>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = {\n  setBemPart,\n};\n\nexport default connect(null, mapDispatchToProps)(BemPartInput);\n","import React from \"react\";\nimport ColoredBemCode, { ColoredBemHtmlExample } from \"./ColoredBemCode\";\nimport BemPartInput from \"./BemPartInput\";\nimport { connect } from \"react-redux\";\n\nconst App = ({ bemParts }) => {\n  return (\n    <div className=\"bem-editor\">\n      <section className=\"bem-editor__part-inputs\">\n        <h2>BEM parts</h2>\n        <label>\n          Block:\n          <BemPartInput partName=\"block\" value={bemParts.block} />\n        </label>\n        <label>\n          Element:\n          <BemPartInput partName=\"element\" value={bemParts.element} />\n        </label>\n        <label>\n          Modifier:\n          <BemPartInput partName=\"modifier\" value={bemParts.modifier} />\n        </label>\n        <label>\n          Modifier value:\n          <BemPartInput partName=\"value\" value={bemParts.value} disabled={!bemParts.modifier} />\n        </label>\n      </section>\n      <section className=\"bem-editor__class-name\">\n        <h2>Class name</h2>\n        <ColoredBemCode parts={bemParts} />\n        {bemParts.unknown ? <div className=\"bem-editor__parse-error\">Invalid BEM pattern!</div> : null}\n      </section>\n      <section className=\"bem-editor__html-example\">\n        <h2>Usage in HTML</h2>\n        <ColoredBemHtmlExample parts={bemParts} />\n      </section>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ bemParts }) => {\n  return { bemParts };\n};\n\nexport default connect(mapStateToProps, null)(App);\n","import { combineReducers } from \"redux\";\nimport bemPartsReducer from \"./features/bemParts/bemPartsSlice\";\n\nconst rootReducer = combineReducers({\n  bemParts: bemPartsReducer,\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { Provider } from \"react-redux\";\nimport App from \"./components/App\";\nimport rootReducer from \"./reducers\";\nimport \"./index.css\";\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}